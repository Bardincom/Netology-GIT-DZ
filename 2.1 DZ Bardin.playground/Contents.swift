import UIKit

// MARK: Homework for Lesson 2.1


var name: String = "Aleksey" // инициализирую переменную для имени сотрудника с типом String (строка).

var secondName: String? = "Aleksandrovich" // инициализирую переменную для имени сотрудинка с опциональным типом String? это значит что значения может не быть.

var surname = "Bardin" // данную переменную создал без явного указания Типа String, Xcode автоматически определил Тип после того как я присвоил строковое значение.

var age: UInt = 30 // создаю переменную для возраста с типом UInt - данный тип разрешает ввод только целых положительных чисел.

var cityOfResidece = "Kyiv" // переменная город проживания сотрудника

secondName = nil // присваиваем значение nil (отсутствие данных) в отчество

age = 31 // изменяем значение возраста путем присвоения нового значения

print("Employee Profile") // выводим в консоль текст Анкета Сотрудника

print("Name: \(name)") // выводим в консоль имя сотрудника

if let secondName = secondName {          // т.к. отчетсва может не быть проверяем его на nil
    print("Second Name: \(secondName)")  // если поле заполнено выведем доступное значение
} else {
    print("Second Name: The field is't filled") // в противном случае выведем сообщени о том что поле не заполнено
}

print("Surname: \(surname)") // выводим в консоль фамилию сотрудника

print("Age: \(age)") // выводим в консоль возраст сотрудника

print("City of Residence: \(cityOfResidece)") // информация о городе проживания сотрудника


/// Краткое резюме:
/// Родился и вырос в маленьком промышленном городе Енакиево, Донецкая область, Украина.
/// Окончил ДонГТУ, г. Алчевск имеет высшее образование Инженер Металлург. Заочно получил второе высшее образование по специальности Менеджер Экономист
/// В настроящее время проживает в г. Киев, женат, есть сын.



/// Добавлены комментраии преподавателя отностиельно различных вариантов проверки на nil

/// Если нам нужно, чтобы программа шла дальше после проверки:

// 1. Если нам НУЖНО работать с данными, которые мы достаем

if let strongSecondName = secondName {
    // делаем что-то с полученным "strongSecondName"
    print(strongSecondName)
} else {
    // выполняем какую-то логику, если значение = nil
    print("Этот пользователь не заполнил поле \"отчество\" либо скрыл свои данные")
}

// 2. Если нам НЕ НУЖНО рабоать с полученными данными, мы просто хотим понять, что они там есть

if secondName != nil {
    // выполняем какой-то код для особого случая, в данном кейсе, можно, например, добавить дополнительное
    // место в окне вывода
} // блок else нам даже не нужен, мы просто выполняем дефолтные действия

// либо так
// в данном случае символ под названием 'underscore' "_" говорит о том, что нам не нунжны данные после успешного их разворачивания, мы просто проверям на nil
if let _ = secondName {
    
}

/// Случай, если мы можем или хотим  сделать ранний выход из программы или метода

// 1. Конструкция guard, мы хотим работать с полученными данными

func showSecondName() {
    guard let strongSecondName = secondName else {
        // Если данных нет, мы выполним код, написанный тут, затем выйдем из программы
        print("Этот пользователь не заполнил поле \"отчество\" либо скрыл свои данные")
        return
    }
    
    // Если данные есть, мы с ними работаем
    print(strongSecondName)
}


// 2. Конструкция guard, мы просто проверям на наличие данных

func doSomethingAfeterCheck() {
    guard secondName != nil else {
        return
    }

    // Продолжаем выполнять код, если отчество есть
    print("secondName != nil, продолжаем выполнять программу")
}

secondName = "Michalich"
showSecondName()
doSomethingAfeterCheck()
